//SPDX-License-Identifier:GPL-3.0
pragma solidity >= 0.5.0 < 0.9.0;
contract crowd_funding {
    mapping(address =>uint) public contributors;

    address public Manager;

    uint public minimum_contribution;
    uint public deadline;
    uint public target;
    uint public raised_amount;
    uint public no_of_contributors;

    struct Request {
        string description;
        address payable recipient;
        uint value;
        bool completed;
        uint no_of_voters;
        mapping (address => bool) voters;
    }
mapping (uint => Request) public Request;
uint public num_Request;

constructor (uint_target, uint_deadline) {
    target = _target;
    deadline = block.timestamp + _deadline;
    minimum_Contribution = 100 wei;
    Manager = msg.sender;
}
    function sendEth() public payable {
        require (block.timestamp < deadline, "deadline has passed");
        require (msg.value >= minimum_Contribution, "minimum contribution not met");
        
        if (contributors[msg.sender] == 0) {
            no_of_contributors ++;
        }
contributors[msg.sender] += msg.value;
raised_Amount += msg.value;
        }
        function getContractBalance() public view returns(uint) {
            return address(this).balance;
        }

        function refund() public {
            require(block.timestamp > deadline && raisedAmount < target, "you are not eligible for refund");
            require(contributors[msg.sender] > 0 );
            address payable user = payable(msg.sender);
            user.transfer(contributors[msg.sender]);
            contributors[msg.sender] = 0;
        }
        modifier onlyManager() {
            require (msg.sender == manager, "only manager can call this function");
            _;

        }
        function createRequests(string memory_description, address payable_recipient, uint_value) public onlyManager {

            request storage newRequest = request[numRequests];

            numRequest ++;
            newRequest.description = _description;
            newRequest.recipients = _recipient;
            newRequest.value = _value;
            newRequest.completed = false;
            newRequest.no_of_voters = 0;

        }
        function voteRequest(uint_request_No) public {
            require (contributors[msg.sender] > 0, "you must be contributor");
            request storage thisRequest = requests[_requestNo];
            Require(thisRequest.voters[msg.sender] == false, "you have already voted");
            thisRequest.voters[msg.sender] = true;
            thisRequest.no_of_voters ++;
        }

}
        function makePayment(uint_requestNo) public onlyManager {
            require(raisedAmount >= target);
            Request storage thisRequest = requests[_requestNo];
            require (thisRequest.completed == false, "this request has been completed");
            require (thisRequest.no_of_voters > no_of_contributors / 2, "Majority does not support");
            thisRequest.recipient.transfer(thisRequest.value);
            thisRequest.completed = true;
            }
         }   
        
