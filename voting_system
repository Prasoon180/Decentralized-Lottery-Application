//SPDX-License-Identifier:GPL-3.0
pragma solidity >= 0.7.0 < 0.9.0;
contract Ballot {
    struct vote {
        address voterAddress;
        bool choice;
    }
    struct voter {
        string voterName;
        bool voted;
    }
    uint private countResult;
    uint public finalResult;
    uint public totalVote;

    address public ballotOfficialAddress;
    string public ballotOfficialName;
    string public proposal;

    mapping(uint => vote) private votes;
    mapping(address => voter) public voterRegister;

    enum State { created, voting, Ended}
    State public state;

    modifier condition (bool _condition) {
        require (_condition);
        _;
    }

    modifier onlyOfficial() {
        require (msg.sender == ballotOfficialAddress);
        _;
    }
    
    modifier inState(State _state) {
        require (state == _state);
        _;
    }    

    constructor(string memory _ballotOfficialName, string memory _proposal) {
        ballotOfficialAddress = msg.sender;
        ballotOfficialName = _ballotOfficialName;
        proposal = _proposal;
        state = State.created;
    }
    function addvoter(address _voterAddress, string memory _voterName) public inState(State.created) onlyOfficial {
        voter memory v;
        v.voterName = _voterName;
        v.voted = false;
        voterRegister[_voterAddress] = v;
        totalVote++;
         }
         function StartVote() public inState(State.created) onlyOfficial {
             state = State.voting;
         }
         function dovote (bool _choice) public inState(State.voting) returns(bool voted) {
             bool found = false;

             if (bytes(voterRegister[msg.sender].voterName).length != 0 && ! voterRegister[msg.sender].voted) {

                 voterRegister[msg.sender].voted = true;
                 vote memory v;
                 v.voterAddress = msg.sender;
                 v.choice = _choice;
                 if (_choice) {
                     countResult++;
                 }
                 
                  votes[totalVote] = v;
         totalVote++;
         found = true;
             }

             return found;
         }
         function endVote() public inState(State.voting) {
             state = State.Ended;
             finalResult = countResult;
         }

}
